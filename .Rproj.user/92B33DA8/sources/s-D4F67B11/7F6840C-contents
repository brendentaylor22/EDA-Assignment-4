# Helper file to download the latest coronavirus data 
# Note: updated 18/3 to include a new data source. Source 1 is from an organisation that curates "Core" datasets;
# the data is presented in the same way for every country, and contains fewer extraneous fields.
# Source 2 is from an individual contributor. Data for China is collected at the province level rather than country level. 
# This makes cumulating counts over time difficult, because each province is updated at different times, and if you 
# want to work out a cumulative count for the country at each updateTime, you need to know how many cases are in each 
# province *at that specific time*. Figure out how to do this might be an good wrangling exercise but not the point
# of the assignment. 
# Source 1 is strongly recommended but both have all the information you need, and you can use either.
# Both are working and up-to-date as of 17/3.

# SOURCE 1 (STRONGLY RECOMMENDED): https://github.com/datasets/covid-19/blob/master/time-series-19-covid-combined.csv

library(lubridate)
library(dplyr)

# download data directly
ncov <- read.csv("https://raw.githubusercontent.com/datasets/covid-19/master/time-series-19-covid-combined.csv")
# convert Date from factor to date class
ncov <- ncov %>% mutate(Date = ymd(Date))
# save
save(ncov, file = "ncov-20200319.Rdata")

# quick check 
ncov %>% group_by(Country.Region, Date) %>%
  summarize(cases = sum(Confirmed),
            dead = sum(Deaths)) %>%
  filter(Country.Region == "China") %>%
  ggplot(aes(x = Date, y = cases)) + geom_line()

# SOURCE 2 (NOT RECOMMENDED): https://github.com/pzhaonet/ncovr

### ONLY DO THIS ONCE
# you need the remotes packages for this, install if you don't have
# install.packages("remotes")
# get the ncovr package
remotes::install_github('pzhaonet/ncovr')
###

### Get the latest data

# load required packages
library(ncovr)

# get the latest data
ncov <- get_ncov() 

# extract the area data frame, which contains everything we need
ncov <- ncov$area

# a function for converting Julian time to ymd_
conv_time <- function(x){
  as.POSIXct('1970-01-01', tz = 'GMT') + x / 1000
}

# convert updateTime from Julian date to ymd-hms
ncov$updateTime <- conv_time(ncov$updateTime)

# check on Italy (looks ok)

ncov %>% 
  filter(!duplicated(.)) %>% 
  filter(countryEnglishName == "Italy") %>%
  ggplot(aes(x = updateTime, y = confirmedCount)) + geom_line()

# check on China (doesn't look ok)
ncov %>% 
  filter(!duplicated(.)) %>% 
  filter(countryEnglishName == "China") %>%
  ggplot(aes(x = updateTime, y = confirmedCount)) + geom_line()

# a bit of a fix, but only gives counts per *day* (less detailed than raw data)

ncov %>% 
  # get rid of duplicated rows
  filter(!duplicated(.), countryEnglishName == "China") %>%
  # since 16/3 data includes a sum over all provinces for "province" China. 
  # Remove this or double counting
  filter(provinceEnglishName != "China") %>%
  # now going to work out the last update in each province each day
  mutate(Day = date(updateTime)) %>%
  group_by(countryEnglishName, provinceEnglishName, Day) %>%
  # whatever counts you want go here
  summarize(confirmedCount = last(confirmedCount)) %>%
  ungroup() %>%
  # now add up over all provinces
  group_by(countryEnglishName, Day) %>%
  summarize(confirmedCount = sum(confirmedCount)) %>%
  ungroup() %>%
  # plot
  ggplot(aes(x = Day, y = confirmedCount)) + geom_line()


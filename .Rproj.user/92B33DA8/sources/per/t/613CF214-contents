---
title: "EDA Assignment 4 - COVID-19 Visualisation"
author: "Brenden Taylor"
date: "11/05/2020"
output: 
  bookdown::html_document2:
    number_sections: no
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, comment = NA, warning = FALSE)
library(dplyr)
#library(lubridate)
library(ggplot2)
library(gganimate)
# library(rnaturalearth)
# library(rnaturalearthdata)
#library(ggmap)
# library(tmap)
library(plotly)
library(sf)
library(spData)
# library(countrycode)
library(googleVis)
library(tidyr)
#library(magick)
#library(leaflet)
options(scipen=10000) #Remove scientific notation from ggplot legend
```
# Animations
```{r get-data, include=FALSE, eval=FALSE}
#Read data in
dat = readRDS("Shiny/app/ncov-dat.rds")

#If current data is old, get new data
#I add 1 to max date because online data is only updated at the end of each day
if(max(dat$Date) +1 < Sys.Date()){
  source("get-clean-data.R")
  dat = readRDS("Shiny/app/ncov-dat.rds")
}
#Read in only most recent day's data
ncov_newest = readRDS("Shiny/app/ncov-newest.rds")
```

```{r remove-geom-data, eval = FALSE}
#Remove geom data from 'dat' dataset to speed up processing
dat_min = dat %>%
  select(-c(geometry))

#Keep one set of geometry data
dat_geom = ncov_newest %>%
  select(c(Country, geometry))
dat_geom = st_as_sf(dat_geom)
```

```{r totals, eval = FALSE}
#Create data frame of cumulative counts
totals = dat_min %>%
  select(c("Date", "Confirmed", "Recovered", "Deaths")) %>%
  group_by(Date) %>%
  summarise_all(list(sum)) %>%
  gather(key = "Type", value = "Number", -Date)
```

```{r animation-map, eval=FALSE}
p = ggplot(data = dat) +
  geom_sf(aes(geometry = geometry,
              fill = Deaths),
          alpha = 0.4) +
  coord_sf(datum = NA) +
  geom_point(aes(x = X, y = Y,
                 size = ifelse(Confirmed==0, NA, Confirmed)),
             shape = 21,
             colour = "turquoise",
             alpha = 0.3,
             fill = "blue") +
  scale_radius(range = c(4, 60), name = "Confirmed Cases") +
  scale_fill_gradient2(low = ("blue"),
                       mid = "orange",
                       high = ("red"),
                       midpoint = 35) +
  theme_minimal() +
  labs(title = "Date: {current_frame}", x = "", y = "") +
  theme(plot.title = element_text(hjust = 0.5,
        vjust = 0.05,
        size = 30),
      legend.position = "bottom",
      legend.direction = "horizontal",
      legend.title = element_text(size = 20),
      legend.text = element_text(size = 20),
      legend.key.width = unit(3, "cm"),
      legend.box = "vertical",
      legend.text.align = 0.5) +
  transition_manual(Date) +
  guides(color = F)

gif = animate(p, renderer = gifski_renderer(loop = T), width = 1920, height = 1080)
gif
anim_save(filename = "Gif - Fill Deaths - Point Cases.gif",
          path = "Gifs")
```

```{r animation-cases-per-mil-map-test}
# cases_min = min(dat$cases_per_mil)
# cases_max = max(dat$cases_per_mil)
# 
# #Static plot to help with layout etc.
# plot_test = ggplot(data = ncov_newest) +
#   geom_sf(aes(geometry = geometry,
#               fill = cases_per_mil)) +
#   scale_fill_gradient(
#     name = "Cases Per Million",
#     low = "blue",
#     high = "red",
#     na.value = "gray",
#     limits = c(cases_min, cases_max)
#   ) +
#   #scale_fill_viridis_b(name = "Cases Per Million", begin = 0, end = 1, limits = c(cases_min, cases_max), na.value = "gray") +
#   theme_void() +
#   guides(fill = guide_colorbar(title.position = "top")) +
#   labs(title = "Cases Per Million") +
#   theme(plot.title = element_text(
#     hjust = 0.5,
#     vjust = 0.05,
#     size = 25
#   )) +
#   theme(plot.caption = element_text(
#     hjust = 0,
#     color = "gray40",
#     size = 15
#   )) +
#   theme(
#     legend.position = c(.5, .08),
#     legend.direction = "horizontal",
#     legend.title.align = 0,
#     legend.key.size = unit(1.3, "cm"),
#     legend.title = element_text(size = 17),
#     legend.text = element_text(size = 13)
#   )
# plot_test
# ggplotly(plot_test)
```

```{r animation-cases-per-mil-map}
# plot_anim = ggplot(data = dat) +
#   geom_sf(aes(geometry = geometry,
#               fill = cases_per_mil)) +
#   scale_fill_gradient(name = "Cases Per Million", low = "blue", high = "red", na.value = "gray") +
#   transition_manual(Date)
# 
# animate(plot_anim, renderer = gifski_renderer(loop = FALSE), width = 1920, height = 1080)
# 
# anim_save(filename = "Cases Per Mil Over Time - World Map large 2.gif",
#           path = "Gifs")
```

```{r animation-cases-per-mil-map-with-points-test}
# #Plots with points instead of highlighting the country
# cases_min = min(dat$cases_per_mil)
# cases_max = max(dat$cases_per_mil)
# 
# 
# plot_test = ggplot(data = ncov_newest) +
#   geom_sf(aes(geometry = geometry)) +
#   geom_point(aes(x = X, y = Y,
#                  size = ifelse(Confirmed==0, NA, Confirmed)),
#              shape = 21,
#              colour = "turquoise",
#              alpha = 0.5,
#              fill = "blue") +
#   theme_void() +
#   guides(fill = guide_colorbar(title.position = "top")) +
#   labs(title = "Life Expectancy, ") +
#   theme(plot.title = element_text(
#     hjust = 0.5,
#     vjust = 0.05,
#     size = 25
#   )) +
#   theme(plot.caption = element_text(
#     hjust = 0,
#     color = "gray40",
#     size = 15
#   )) +
#   theme(
#     legend.position = c(.5, .08),
#     legend.direction = "horizontal",
#     legend.title.align = 0,
#     legend.key.size = unit(1.3, "cm"),
#     legend.title = element_text(size = 17),
#     legend.text = element_text(size = 13)
#   ) +
#   scale_radius(range = c(0, 20))
# plot_test
# ggplotly(plot_test)
```

```{r animation-cases-per-mil-map-with-points}
# plot_anim = ggplot(data = dat) +
#   geom_sf(data = dat_geom) +
#   geom_sf(aes(geometry = geometry, frame = Date)) +
#   geom_point(aes(x = X, y = Y,
#                  size = ifelse(Confirmed==0, NA, Confirmed),
#                  fill = as.factor(cat),
#                  color = as.factor(cat)),
#              shape = 21,
#              alpha = 0.5) +
#   scale_radius(range = c(4, 60)) +
#   #scale_fill_manual(values = c("green", "blue", "orange", "red")) +
#   scale_fill_brewer(palette = "Oranges") +
#   scale_color_brewer(palette = "Oranges") +
#   theme_void() +
#   theme(plot.title = element_text(hjust = 0.5,
#         vjust = 0.05,
#         size = 25),
#       legend.position = c(0.5, 0.08),
#       legend.direction = "horizontal",
#       legend.title = element_text(size = 17),
#       legend.text = element_text(size = 13),
#       legend.key.size = unit(1.3, "cm")) +
#   transition_manual(as.factor(Date)) +
#   labs(title = "Confirmed Cases: {current_frame}",
#        size = "Test") +
#   guides(fill = FALSE, color = F)
# 
# a_gif = animate(plot_anim, renderer = gifski_renderer(loop = TRUE), width = 1920, height = 1080)
# 
# anim_save(filename = "WiP.gif", 
#           path = "C:/Users/brend/Documents/Masters - Local/EDA/Assignments/Assignment-4/Gifs")
# 

#animate(plot_anim, renderer = gifski_renderer(loop = TRUE), width = 1920, height = 1080, fps = 5)
#animate(plot_anim, renderer = gifski_renderer(loop = TRUE), width = 500, height = 300, fps = 5)

#anim_save(filename = "Confirmed Cases Over Time - World Map with dots - FPS 5.gif", 
#          path = "C:/Users/brend/Documents/Masters - Local/EDA/Assignments/Assignment-4/Gifs")

# animate(plot_anim, renderer = gifski_renderer(loop = TRUE), width = 1920, height = 1080)
# 
# anim_save(filename = "Confirmed Cases Over Time - World Map with dots - FPS 10.gif", 
#           path = "C:/Users/brend/Documents/Masters - Local/EDA/Assignments/Assignment-4/Gifs")
```

```{r animation-bar-plot}
# plot_bar = ggplot(data = totals) +
#   geom_bar(aes(x = Date, y = Number,
#                fill = Type),
#            stat = "identity",
#            position = "stack") +
#   theme_minimal() +
#   scale_fill_brewer("",
#                     palette = "viridis",
#                     direction = -1) +
#   labs(title = "",
#        x = "",
#        y = "") +
#   transition_time(Date) +
#   shadow_mark(past = T)
# 
# animate(plot_bar, renderer = gifski_renderer(loop = TRUE), width = 500, height = 300)
# 
# anim_save(filename = "Barplot.gif", 
#           path = "Gifs")
```

```{r animation-cases, eval=FALSE}
#Get total number of confirmed cases
cases = totals %>%
  filter(Type == "Confirmed") %>%
  select(c("Date", "Number"))

plot_line = ggplot(data = totals,
                   aes(x = Date, 
                       y = Number,
                       fill = Type)) +
  geom_area() +
  theme_minimal() +
  labs(title = "",
       x = "",
       y = "") +
  scale_fill_brewer("",palette = "Set1") +
  theme(plot.title = element_text(hjust = 0.5,
        vjust = 0.05,
        size = 25),
      axis.text = element_text(size = 20),
      legend.position = "bottom",
      legend.direction = "horizontal",
      legend.title = element_text(size = 20),
      legend.text = element_text(size = 16),
      legend.key.size = unit(1.5, "cm"),
      legend.text.align = 0.5) +
  transition_reveal(Date)
  

animate(plot_line, renderer = gifski_renderer(loop = TRUE), width = 1920, height = 1080)
anim_save(filename = "Line.gif", 
          path = "Gifs")
```

![Map](Gif - Fill Deaths - Point Cases.gif)

![Line](Line.gif)

# Written Piece

COVID-19 has, in the literal sense, gone viral this year. Every day, we see graphs and infographics, news articles and interviews, and it's often quite difficult making sense of these sources of information. This has lead to a rise in 'Facebook Virologists' and 'WhatsApp Journalists' who spread news far and wide without fully understanding it, or knowing where it came from. Particularly now, during a global pandemic, this is dangerous and irresponsible (see [the bleach cure](https://www.bbc.com/news/world-us-canada-52407177)).Today we're going to unpack what we think are two of the more useful animations, and also point out some things you need to be careful of when interpreting any sort of statistical visualisation.

Before we take a look at some graphics though, it's important to know that comparisons between countries are generally not a good idea. Different countries are just that - different! They have different populations with different socio-economic circumstances, different economies, different healthcare systems and different priorities. These differences make it very difficult to accurately compare the impact of COVID-19 in multiple countries and we need to be aware of this. For example, one shouldn't be suprised to find out that the USA has way more deaths due to the virus than New Zealand. Firstly, the US has a population far greater than New Zealand's. Secondly, the US has more confirmed cases. Thirdly, the US had its first case before New Zealand so the virus has had more time to run its course in the US.

Of course, comparisons can still be made but we just need to be aware that there are differences and it might be one of these underlying differences that explains something, not what we think it is!

## The Map

The first animation is the classic map.

![Map](Gif - Fill Deaths - Point Cases.gif)

This is one of the nicer animations out there simply because it can show a fair amount of information, while still being quite easily intepreted. 

Firstly, we can see that the title is running through dates so we know that the picture is changing as time goes on (this is pretty much always the case for COVID-19 GIFs because that's what we want to see: how things change over time!). Secondly, we need to take careful note of the legends so we can get a better understanding of what this GIF is showing us. In this case, there are two legends. The colour scale shows us the number of deaths in a country while the size of the circle over a country indicates the number of confirmed cases.



